plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.0'
    id 'io.spring.dependency-management' version '1.1.6'
}

group = 'com.toy.pet'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    //implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    //implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    implementation 'com.auth0:java-jwt:4.0.0'

    implementation 'com.querydsl:querydsl-core:5.0.0'  // QueryDSL 최신 버전
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta"
    annotationProcessor 'jakarta.persistence:jakarta.persistence-api:3.1.0' // Jakarta Persistence
    annotationProcessor 'jakarta.annotation:jakarta.annotation-api:2.1.1'  // Jakarta Annotations

}

tasks.named('test') {
    useJUnitPlatform()
}

//* * * querydsl * * *
def generated = 'src/main/generated'

sourceSets {
    main {
        // 생성된 소스 디렉토리를 sourceSets에 추가
        java {
            srcDirs += generated
        }
    }
}

tasks.withType(JavaCompile) {
    // 애너테이션 프로세서의 경로를 설정
    options.annotationProcessorPath = configurations.annotationProcessor

    // 생성된 소스 디렉토리를 컴파일러 인수로 추가
    options.compilerArgs += ['-AoutputDir=' + generated]
}

clean.doLast {
    // 빌드를 클린할 때 생성된 디렉토리를 삭제
    file(generated).deleteDir()
}
//* * * querydsl * * *

